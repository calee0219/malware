
# coding: utf-8

# ### import packages

# In[3]:

import json
import pefile
import os
from os.path import join, getsize


# ### generate import data from pefile

# In[4]:

def gen_import(pe):
    data = ''
    for entry in pe.DIRECTORY_ENTRY_IMPORT:
        if entry.imports:
            for imp in entry.imports:
                if entry.dll is not None and imp.name is not None:
                    data += entry.dll.decode("utf-8") + '\t' + imp.name.decode("utf-8") + '\n'
                else:
                    data += '\n'
        else:
            data = ''
    return data


# ### generate sections data from pefile

# In[5]:

def gen_sections(pe):
    for section in pe.sections:
        data = []
        temp = json.loads('{"Index": 0, "Name": "", "Entropy": 0, "VirtualSize": 0, "Flags": "", "RawSize": 0, "VirtualAddress": ""}')
        if pe.sections:
            for idx, section in enumerate(pe.sections):
                temp['Index'] = idx
                temp['Name'] = section.Name.decode("utf-8")
                temp['VirtualSize'] = section.Misc_VirtualSize
                temp['RawSize'] = section.SizeOfRawData
                temp['VirtualAddress'] = hex(section.VirtualAddress)
                data.append(temp)
    return data


# ### generate info data from pefile

# In[6]:

def gen_info(pe):
    data = {"DllCharacteristics": "0x0", "TimeDateStamp": 0, "BaseOfCode": "0x0", "FileDescription": "", "FileEntropy": 0, "ImageVersion": "", "LoaderFlags": "", "SizeOfStackCommit": 0, "SizeOfUninitializedData": 0, "SizeOfHeapReserve": 0, "LinkerVersion": "", "SizeOfHeapCommit": 0, "SizeOfStackReserve": 0, "OperatingSystemVersion": "", "SizeOfHeaders": 0, "Subsystem": "", "FileVersion": "", "LegalCopyright": "", "NumberOfSections": 0, "FileAlignment": "", "ProductVersion": "", "SubsystemVersion": "", "BaseOfData": "", "SizeOfOptionalHeader": 0, "AddressOfEntryPoint": "", "SectionAlignment": "", "SizeOfCode": 0, "CompanyName": "", "ImageBase": "", "SizeOfInitializedData": 0, "NumberOfSymbols": 0, "ProductName": "", "SizeOfImage": 0, "NumberOfRvaAndSizes": 0, "FileSize": 0, "Characteristics": ""}
    if pe.OPTIONAL_HEADER:
        header = pe.OPTIONAL_HEADER
        data['AddressOfEntryPoint'] = header.AddressOfEntryPoint
        data['BaseOfCode'] = header.BaseOfCode
        data['DllCharacteristics'] = (header.DllCharacteristics)
        data['FileAlignment'] = (header.FileAlignment)
        data['ImageBase'] = hex(header.ImageBase)
        data['Subsystem'] = hex(header.Subsystem)
        data['SectionAlignment'] = hex(header.SectionAlignment)
        data['LoaderFlags'] = hex(header.LoaderFlags)
        data['SizeOfUninitializedData'] = (header.SizeOfUninitializedData)
        data['SizeOfStackReserve'] = (header.SizeOfStackReserve)
        data['SizeOfStackCommit'] = (header.SizeOfStackCommit)
        data['SizeOfInitializedData'] = (header.SizeOfInitializedData)
        data['SizeOfImage'] = (header.SizeOfImage)
        data['SizeOfHeapCommit'] = (header.SizeOfHeapCommit)
        data['SizeOfHeapReserve'] = (header.SizeOfHeapReserve)
        data['SizeOfHeaders'] = (header.SizeOfHeaders)
        data['SizeOfCode'] = (header.SizeOfCode)
        data['ImageVersion'] = (header.MajorImageVersion)
        data['LinkerVersion'] = (header.MajorLinkerVersion)
        data['NumberOfRvaAndSizes'] = (header.NumberOfRvaAndSizes)
        data['OperatingSystemVersion'] = (header.MajorOperatingSystemVersion)
        data['SubsystemVersion'] = (header.MajorSubsystemVersion)
    if pe.FILE_HEADER:
        header = pe.FILE_HEADER
        data['Characteristics'] = hex(header.Characteristics)
        data['TimeDateStamp'] = hex(header.TimeDateStamp)
        data['SizeOfOptionalHeader'] = hex(header.SizeOfOptionalHeader)
        data['NumberOfSections'] = hex(header.NumberOfSections)
        data['NumberOfSymbols'] = hex(header.NumberOfSymbols)
    return data


# ### check pefile's property

# In[7]:

def emp(pe):
   if pe is not None and pe.DIRECTORY_ENTRY_IMPORT is not None and pe.sections is not None:
       return False
   else:
       return True


# ### parse pefile to features

# In[ ]:

idx = 0
for root, dirnames, filenames in os.walk('C:\\Program Files (x86)'):
        for filename in filenames:
            if filename.endswith(('.exe', '.EXE')):
                pe =  pefile.PE(os.path.join(root, filename))
                if emp(pe):
                    continue
                os.system('mkdir ' + str(idx))
                open('.\\' + str(idx) + '\\info', 'w').write(str(gen_info(pe)))
                open('.\\' + str(idx) + '\\sections', 'w').write(str(gen_sections(pe)))
                open('.\\' + str(idx) + '\\import', 'w').write(str(gen_import(pe)))
                idx += 1
                if idx == 3000:
                    break

